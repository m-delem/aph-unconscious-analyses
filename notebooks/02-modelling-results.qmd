---
title: Modelling results
subtitle: "Are there unconscious visual images in aphantasia? Development of an implicit priming paradigm"
---

```{r}
#| label: setup
#| include: false

library(here)
source(here("scripts/00-preprocessing.R"))
```

:::: {.content-visible when-format="html"}
::: {.callout-note collapse="true"}
# Packages and setup
```r
{{< include ../scripts/_setup.R >}}
```
:::
::::

# Questionnaires analyses



# Accuracy analyses



# Response Times analyses

## Rationale

To account for the non-normal, positively skewed distributions of the RTs, we fitted Generalized Linear Mixed Models (GLMMs) with inverse Gaussian distributions. The models were implemented in the `lme4` R package and integrated in `tidymodels` workflows using the package `multilevelmod`. Models with Gamma and Gaussian distributions were also fitted and compared with the AIC and BIC to ensure that we chose the best distribution available. 

The models included the ***Group*** (aphantasic, control), ***Congruence*** condition (congruent or incongruent) and ***Color*** condition (color or uncolored) along with all their two and three way interactions as fixed categorical predictors, while ***participants*** have been included as grouping factors (i.e. "random effects"). The random effect structure was chosen by fitting and comparing models with every possible combination of distribution and structure (intercept by participant, congruence or color, slope by participant on congruence and/or color) aiming for the best balance between goodness of fit and parsimony. Complex random-effects structures including various slopes on the factors failed to converge to stable and reliable estimates, hence the optimal models chosen included a single by-participant random intercept.

## Model fitting

The formula of the model fitted is $RT \sim (aphantasia + congruence + color)^3 + (1|subjectid)$. [See the HTML version for the code and details.]{.content-hidden when-format="html"}

::: {.content-visible when-format="html"}
```{r}
#| label: model-fitting
#| code-fold: false

model_formula <- rt ~ (aphantasia + congruence + color)^3 + (1|subjectid)

fit_implicit <- 
  glmer(
    formula = model_formula,
    data = df_i_rt,
    family = inverse.gaussian(link = "identity"),
    control = glmerControl(optimizer = "bobyqa")
  )

fit_explicit <- 
  glmer(
    formula = model_formula,
    data = df_e_rt,
    family = inverse.gaussian(link = "identity"),
    control = glmerControl(optimizer = "bobyqa")
  )
```
:::

## Model diagnostics

The quality checks of the models are displayed in [@suppfig-implicit-checks and @suppfig-explicit-checks]{.content-visible when-format="html"} [@suppfig-implicit-checks-2 and @suppfig-explicit-checks-2]{.content-hidden when-format="html"}.

:::: {.content-visible when-format="html"}
::: {.panel-tabset .column-page-inset}

### Implicit task

```{r}
#| label: implicit-checks
#| fig-width: 14
#| fig-height: 12
#| eval: false

# characteristics to check
model_checks <- c("pp_check","homogeneity", "vif", "outliers", "qq", "reqq")

check_model(
  fit_implicit, 
  checks = model_checks, 
  detrend = FALSE, 
  residual_type = "normal"
  ) |> 
  plot()

ggsave(here("figures/checks-implicit.png"), dpi = 600)
```

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the implicit task.](../figures/checks-implicit.png){#suppfig-implicit-checks}

### Explicit task

```{r}
#| label: explicit-checks
#| fig-width: 14
#| fig-height: 12
#| eval: false

check_model(
  fit_explicit, 
  checks = model_checks, 
  detrend = FALSE, 
  residual_type = "normal"
  ) |> 
  plot()

ggsave(here("figures/checks-explicit.png"), dpi = 600)
```

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the explicit task.](../figures/checks-explicit.png){#suppfig-explicit-checks}

:::
::::

:::{.content-hidden when-format="html"}

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the implicit task.](../figures/checks-implicit.png){#suppfig-implicit-checks-2}

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the explicit task.](../figures/checks-explicit.png){#suppfig-explicit-checks-2}

:::


## Model summaries

:::{#supptbl-glmm-i-summary}
```{r}
#| label: summary-implicit
#| echo: false

model_performance(fit_implicit) |> display()

model_parameters(fit_implicit) |> display()
```

Performance and estimates of the GLMM fitted on the implicit task data.
:::

:::{#supptbl-glmm-e-summary}
```{r}
#| label: summary-explicit
#| echo: false

model_performance(fit_explicit) |> display()

model_parameters(fit_explicit) |> display()
```

Performance and estimates of the GLMM fitted on the explicit task data.
:::

## Estimated means and contrasts

:::{#supptbl-estimates-implicit}
```{r}
#| label: emmeans-implicit
#| echo: false

emmeans_im <-
  emmeans(fit_implicit, c("aphantasia", "congruence")) |>
  summary(point.est = median) |>
  as_tibble() |>
  mutate(across(3:7, ~.*1000)) |>
  rename(median = emmean)

emmeans_im |> 
  rename(Group = 1, Condition = 2, "Median (ms)" = median) |>
  display()

fit_implicit |> 
  estimate_contrasts(
    contrast = c("aphantasia", "congruence"), 
    p_adjust = "none"
    ) |> 
  display()
```

Estimated means for each group in each congruence condition and contrasts between groups and conditions in the implicit task.
:::

:::{#supptbl-estimates-explicit}
```{r}
#| label: emmeans-explicit
#| echo: false

emmeans_ex <-
  emmeans(fit_explicit, c("aphantasia", "congruence")) |>
  summary(point.est = median) |>
  as_tibble() |>
  mutate(across(3:7, ~.*1000)) |>
  rename(median = emmean)

emmeans_ex |> 
  rename(Group = 1, Condition = 2, "Median (ms)" = median) |>
  display()

fit_explicit |> 
  estimate_contrasts(
    contrast = c("aphantasia", "congruence"), 
    p_adjust = "none"
    ) |> 
  display()
```

Estimated means for each group in each congruence condition and contrasts between groups and conditions in the explicit task.
:::

## Visualisations

The figures below are also displayed in the main article. [See the HTML version for the code and details.] {.content-hidden when-format="html"}

```{r}
#| label: fig-im
#| fig-cap: Subject means and model-estimated means per group and condition in the implicit task.
#| fig-width: 18
#| fig-height: 7

subj_means_im <-
  df_i_rt |> 
  group_by(subjectid, aphantasia, congruence) |>
  reframe(rt = mean(rt)*1000)

(
  plot_models_full(subj_means_im, emmeans_im, y_min = 400, y_max = 1110, size = 4) +
  plot_models_zoomed(subj_means_im, emmeans_im, size = 4) &
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    legend.margin = margin(0, 150, 25, 0),
    axis.title.y = element_text(size = 20),
    axis.text.x = element_text(size = 18)
  )
) +
  plot_layout(
    guides = "collect",
    widths = c(1, 1.2)
  )

# ggsave(here("figures/model-implicit.png"), dpi = 600)
```

```{r}
#| label: fig-ex
#| fig-cap: Subject means and model-estimated means per group and condition in the explicit task.
#| fig-width: 18
#| fig-height: 7

subj_means_ex <-
  df_e_rt |> 
  group_by(subjectid, aphantasia, congruence) |>
  reframe(rt = mean(rt)*1000)

(
  plot_models_full(subj_means_ex, emmeans_ex, y_min = 350, y_max = 1450, size = 4) +
  plot_models_zoomed(subj_means_ex, emmeans_ex, size = 4) &
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    legend.margin = margin(0, 150, 25, 0),
    axis.title.y = element_text(size = 20),
    axis.text.x = element_text(size = 18)
  )
) +
  plot_layout(
    guides = "collect",
    widths = c(1, 1.2)
  )

# ggsave(here("figures/model-explicit.png"), dpi = 600)
```

# Correlational analyses



:::: {.content-visible when-format="html"}

&nbsp;
&nbsp;
&nbsp;

::: {.callout-note collapse="true"}
# Session information for reproducibility

```{r}
#| label: session-information
#| echo: false

cat("═════════════════════════════════════════════════════════════════════════")
report_system(session = sessionInfo())
cat("Packages used:")
report_packages(session = sessionInfo())
cat("═════════════════════════════════════════════════════════════════════════")
```
:::
::::


