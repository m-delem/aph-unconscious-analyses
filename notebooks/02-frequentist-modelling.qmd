---
title: Frequentist Modelling
subtitle: "Are there unconscious visual images in aphantasia? Development of an implicit priming paradigm"
---

```{r}
#| label: setup
#| include: false

library(here)
source(here("scripts/00-preprocessing.R"))
```

::: {.content-visible when-format="html"}
::: {.callout-note collapse="true"}
# Packages and setup

``` r
{{< include ../scripts/_setup.R >}}
```
:::
:::

# Questionnaires analyses

## Group differences

### Table

::: {#supptbl-questionnaire-results}
```{r}
#| label: table-questionnaires
#| echo: false

group_effects <- 
  df_questionnaires |>
  pivot_longer(
    cols = c("VVIQ":"SUIS"),
    names_to = "questionnaire",
    values_to = "score"
  ) |> 
  group_by(questionnaire) |> 
  nest() |> 
  rowwise() |> 
  mutate(
    lm = list(lm(score ~ aphantasia + age, data = data)),
    lm_ranked = list(lm(rank(score) ~ aphantasia + age, data = data)),
    ranked_means = list(prepare_means(lm_ranked, questionnaire)),
    table = list(generate_model_summary(lm, lm_ranked, questionnaire))
  )

bind_rows(group_effects$table) |> display()
```
:::

### Plot

```{r}
#| label: questionnaire-plot-setup
#| echo: false

# dodge width for all the geoms
dw <- 1
# axis text size
txt <- 14
# legend text size
txt_legend <- 12

norm_means <- 
  df_q_norm |> 
  group_by(aphantasia) |>
  pivot_longer(
    cols = c(VVIQ:SUIS),
    names_to = "Questionnaire",
    values_to = "score"
  ) |> 
  group_by(Questionnaire) |> 
  nest() |> 
  rowwise() |> 
  mutate(
    lm = list(lm(score ~ aphantasia, data = data)),
    means = list(estimate_means(lm, by = "aphantasia"))
  ) |> 
  unnest(means) |> 
  select(!c(data, lm)) |> 
  ungroup() |> 
  mutate(
    Questionnaire = fct_relevel(
      Questionnaire,
      c("VVIQ", "SUIS", "OSIQ_Object", "OSIQ_Spatial")
    ))
```

::: {#suppfig-questionnaire-plot}
```{r}
#| label: plot-questionnaires
#| fig-width: 10
#| fig-height: 5

df_q_norm |> 
  
  # -------------------------- Long format first
  pivot_longer(
    cols = c(VVIQ:SUIS),
    names_to = "Questionnaire",
    values_to = "Score"
  ) |>
  mutate(
    Questionnaire = fct_relevel(
      Questionnaire, 
      c("VVIQ", "SUIS", "OSIQ_Object", "OSIQ_Spatial")
    )) |> 
  
  # -------------------------- Plotting
  ggplot(aes(
    x = Questionnaire, 
    y = Score, 
    fill = aphantasia, 
    color = aphantasia
    )) +
  
  # accentuation of the median line at 0.5
  geom_hline(
    yintercept = .5,
    linetype = 1,
    color = "grey30",
    alpha = .2
  ) +
  
  # --------------------- Scores
  # violin shapes for the distributions and quantiles
  geom_violin(
    position = position_dodge(dw),
    alpha = .1,
    draw_quantiles = c(.25, .5, .75)
  ) +
  # points for means and lines for CIs
  geom_pointrange(
    data = norm_means,
    aes(
      x = Questionnaire,
      y = Mean,
      ymin = CI_low,
      ymax = CI_high,
      color = aphantasia
    ),
    size = .75,
    linewidth = 1,
    position = position_dodge(dw)
  ) +
  
  # --------------------- Stars and lines
  # stars for significance
  annotate(
    geom  = "text", label = "***", color = "black",
    x = 1, y = .95, size  = 10 
    ) +
  # dotted line that separates the different questionnaires
  geom_vline(
    aes(xintercept = stage(Questionnaire, after_scale = 1.5)),
    linetype = 3
  ) +
  # stars 
  annotate(
    geom  = "text", label = "***", color = "black",
    x = 2, y = .95, size  = 10 
    ) +
  # dotted line
  geom_vline(
    aes(xintercept = stage(Questionnaire, after_scale = 2.5)),
    linetype = 3
  ) +
  # stars
  annotate(
    geom  = "text", label = "***", color = "black",
    x = 3, y = .95, size  = 10 
    ) +
  # dotted line
  geom_vline(
    aes(xintercept = stage(Questionnaire, after_scale = 3.5)),
    linetype = 3
  ) +
  # stars
  annotate(
    geom  = "text", label = "***", color = "black",
    x = 4, y = .95, size  = 10 
    ) +
  
  # --------------------- Aesthetics
  scale_color_okabeito(name = "Group:  ", labels = c(" Control   ", " Aphantasia")) +
  scale_fill_okabeito(name = "Group:  ", labels  = c(" Control   ", " Aphantasia")) +
  scale_x_discrete(
    name = "",
    labels = c("VVIQ", "SUIS", "OSIQ-Object", "OSIQ-Spatial")
  ) +
  scale_y_continuous(
    name = "Standardized score",
    breaks = breaks_pretty(8)
  ) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(),
    axis.text.x  = element_text(size = txt),
    axis.title.y = element_text(size = txt),
    legend.title = element_text(size = txt_legend),
    legend.text  = element_text(size = txt_legend),
    legend.position = "top"
    )

ggsave(here("figures/questionnaires.png"), dpi = 600)
```
:::

## Congruence effects correlations

### Matrices

```{r}
#| label: tables-corr-questionnaires

corr_whole <- 
  df_questionnaires |> 
    select(aphantasia, "Implicit effect":"SUIS") |>
    correlation(method = "spearman", p_adjust = "fdr") 

corr_aph <-
  df_questionnaires |>
    select(aphantasia, "Implicit effect":"SUIS") |>
    filter(aphantasia == "yes") |>
    correlation(method = "spearman", p_adjust = "fdr") 

corr_control <-
  df_questionnaires |>
    select(aphantasia, "Implicit effect":"SUIS") |>
    filter(aphantasia == "no")  |>
    correlation(method = "spearman", p_adjust = "fdr") 

corr_whole
# corr_aph
# corr_control
```

::: {#suppfig-corr-mat-questionnaires}
```{r}
#| label: corr-mat-questionnaires
#| fig-width: 10
#| fig-height: 6

corr_whole |> summary() |> plot() + 
  labs(title = "Correlation matrix, whole group (Spearman FDR corrected)")

# ggsave(here("figures/corr-mat-whole.png"), dpi = 600)

# corr_aph |> summary() |> plot() +
#   labs(title = "Correlation matrix, aphantasia group only (Spearman FDR corrected)")

# ggsave(here("figures/corr-mat-aph.png"), dpi = 600)

# corr_control |> summary() |> plot() +
#   labs(title = "Correlation matrix, control group only (Spearman FDR corrected)")

# ggsave(here("figures/corr-mat-control.png"), dpi = 600)
```
:::

### Plots

```{r}
#| label: corr-plots-questionnaires-setup
#| fig-width: 10
#| fig-height: 5
#| include: false

note_size = 6

# Ranked versions
p_corr_vviq <-
  df_q_ranked |> 
  plot_correlations("VVIQ", "Implicit effect") +
  labs(x = "VVIQ (ranked)", y = "Implicit effect") +
  annotate(
    geom  = "text", 
    label = TeX(r"($\rho = 0.21, \textit{p} = 0.02$)"), 
    color = "black",
    x = 89, y = .25, 
    size  = note_size 
    )

p_corr_osiq <-
  df_q_ranked |> 
  plot_correlations("OSIQ_Object", "Implicit effect") +
  labs(x = "OSIQ-Object (ranked)", y = "Implicit effect") +
  annotate(
    geom  = "text", 
    label = TeX(r"($\rho = 0.26, \textit{p} = 0.003$)"), 
    color = "black",
    x = 80, y = .25, 
    size  = note_size 
    )

p_corr_suis <-
  df_q_ranked |> 
  plot_correlations("SUIS", "Implicit effect") +
  labs(x = "SUIS (ranked)", y = "Implicit effect") +
  annotate(
    geom  = "text", 
    label = TeX(r"($\rho = 0.27, \textit{p} = 0.002$)"), 
    color = "black",
    x = 81, y = .25, 
    size  = note_size 
    )
```

::: {#suppfig-corr-plots-questionnaires}
```{r}
#| label: corr-plots-questionnaires
#| fig-width: 20
#| fig-height: 15

layout <- "
AAAABBBB
##CCCC##
"

# ((p_corr_vviq + p_corr_osiq) / p_corr_suis) +
(p_corr_vviq + p_corr_osiq + p_corr_suis) +
  plot_layout(design = layout, guides = "collect") &
  theme(
    legend.position = "top", 
    legend.text = element_text(size = 20),
    legend.title = element_blank(),
    axis.title = element_text(size = 16)
    )

# ggsave(here("figures/corr-plots.png"), dpi = 600)
```
:::

# Accuracy analyses

We quickly checked for accuracy differences between groups with a logistic regression model.

```{r}
#| label: accuracy-models

fit_acc_im <- 
  glmer(
    formula = correct_implicit ~ (aphantasia + congruence + color)^3 + (1 | subjectid),
    data = df_i_acc,
    family = binomial(link = "logit"),
  control = glmerControl(optimizer = "bobyqa")
  )

fit_acc_ex <- 
  glmer(
    formula = correct_explicit ~ (aphantasia + congruence + color)^3 + (1 | subjectid),
    data = df_e_acc,
    family = binomial(link = "logit"),
    control = glmerControl(optimizer = "bobyqa")
  )
```

::: {#supptbl-acc-i-summary}
```{r}
#| label: summary-accuracy-implicit
#| echo: false

model_performance(fit_acc_im) |> display()

# model_parameters(fit_acc_im) |> display()

Anova(fit_acc_im)
```

Performance and estimates of the logistic GLMM fitted on accuracy in the implicit task.
:::

::: {#supptbl-acc-i-estimates}
```{r}
#| label: estimates-accuracy-implicit
#| echo: false

estimate_means(fit_acc_im, by = "color", transform = "response") |> display()

estimate_contrasts(fit_acc_im, contrast = "color", transform = "response", p_adjust = "none") |> display()
```

Estimated probability of a correct answer and log-odds contrasts between groups for the accuracy in the implicit task.
:::

::: {#supptbl-acc-e-summary}
```{r}
#| label: summary-accuracy-explicit
#| echo: false

model_performance(fit_acc_ex) |> display()

# model_parameters(fit_acc_ex) |> display()

Anova(fit_acc_ex)
```

Performance and estimates of the logistic GLMM fitted on accuracy in the explicit task.
:::

::: {#supptbl-acc-e-estimates}
```{r}
#| label: estimates-accuracy-explicit
#| echo: false

estimate_means(fit_acc_ex, by = "color", transform = "response") |> display()

estimate_contrasts(fit_acc_ex, contrast = "color", transform = "response", p_adjust = "none") |> display()
```

Estimated probability of a correct answer and log-odds contrasts between groups for the accuracy in the explicit task.
:::

# Response Times analyses

## Rationale

To account for the non-normal, positively skewed distributions of the RTs, we fitted Generalized Linear Mixed Models (GLMMs) with inverse Gaussian distributions. The models were implemented in the `lme4` R package and integrated in `tidymodels` workflows using the package `multilevelmod`. Models with Gamma and Gaussian distributions were also fitted and compared with the AIC and BIC to ensure that we chose the best distribution available.

The models included the ***Group*** (aphantasic, control), ***Congruence*** condition (congruent or incongruent) and ***Color*** condition (color or uncolored) along with all their two and three way interactions as fixed categorical predictors, while ***participants*** have been included as grouping factors (i.e. "random effects"). The random effect structure was chosen by fitting and comparing models with every possible combination of distribution and structure (intercept by participant, congruence or color, slope by participant on congruence and/or color) aiming for the best balance between goodness of fit and parsimony. Complex random-effects structures including various slopes on the factors failed to converge to stable and reliable estimates, hence the optimal models chosen included a single by-participant random intercept.

## Model fitting

The formula of the model fitted is $RT \sim (aphantasia + congruence + color)^3 + (1|subjectid)$. [See the HTML version for the code and details.]{.content-hidden when-format="html"}

::: {.content-visible when-format="html"}
```{r}
#| label: model-fitting
#| code-fold: false

model_formula <- rt ~ (aphantasia + congruence + color)^3 + (1|subjectid)

fit_implicit <- 
  glmer(
    formula = model_formula,
    data = df_i_rt,
    family = inverse.gaussian(link = "identity"),
    control = glmerControl(optimizer = "bobyqa")
  )

fit_explicit <- 
  glmer(
    formula = model_formula,
    data = df_e_rt,
    family = inverse.gaussian(link = "identity"),
    control = glmerControl(optimizer = "bobyqa")
  )
```
:::

## Model diagnostics

The quality checks of the models are displayed in [@suppfig-implicit-checks and @suppfig-explicit-checks]{.content-visible when-format="html"} [@suppfig-implicit-checks-2 and @suppfig-explicit-checks-2]{.content-hidden when-format="html"}.

::: {.content-visible when-format="html"}
::: {.panel-tabset .column-page-inset}
### Implicit task

```{r}
#| label: implicit-checks
#| fig-width: 14
#| fig-height: 12
#| eval: false

# characteristics to check
model_checks <- c("pp_check","homogeneity", "vif", "outliers", "qq", "reqq")

check_model(
  fit_implicit, 
  checks = model_checks, 
  detrend = FALSE, 
  residual_type = "normal"
  ) |> 
  plot()

# ggsave(here("figures/checks-implicit.png"), dpi = 600)
```

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the implicit task.](../figures/checks-implicit.png){#suppfig-implicit-checks}

### Explicit task

```{r}
#| label: explicit-checks
#| fig-width: 14
#| fig-height: 12
#| eval: false

check_model(
  fit_explicit, 
  checks = model_checks, 
  detrend = FALSE, 
  residual_type = "normal"
  ) |> 
  plot()

# ggsave(here("figures/checks-explicit.png"), dpi = 600)
```

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the explicit task.](../figures/checks-explicit.png){#suppfig-explicit-checks}
:::
:::

::: {.content-hidden when-format="html"}
![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the implicit task.](../figures/checks-implicit.png){#suppfig-implicit-checks-2}

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the explicit task.](../figures/checks-explicit.png){#suppfig-explicit-checks-2}
:::

## Model summaries

::: {#supptbl-glmm-i-summary}
```{r}
#| label: summary-implicit
#| echo: false

model_performance(fit_implicit) |> display()

# model_parameters(fit_implicit) |> display()

Anova(fit_implicit)
```

Performance and estimates of the GLMM fitted on the implicit task data.
:::

::: {#supptbl-glmm-e-summary}
```{r}
#| label: summary-explicit
#| echo: false

model_performance(fit_explicit) |> display()

# model_parameters(fit_explicit) |> display()

Anova(fit_explicit)
```

Performance and estimates of the GLMM fitted on the explicit task data.
:::

## Estimated means and contrasts

::: {#supptbl-estimates-implicit}
```{r}
#| label: emmeans-implicit
#| echo: false

emmeans_im <-
  emmeans(fit_implicit, c("aphantasia", "congruence")) |>
  summary(point.est = median) |>
  as_tibble() |>
  mutate(across(3:7, ~.*1000)) |>
  rename(median = emmean)

emmeans_im |> 
  rename(Group = 1, Condition = 2, "Median (ms)" = median) |>
  display()

fit_implicit |> 
  estimate_contrasts(
    contrast = c("aphantasia", "congruence"), 
    p_adjust = "none"
    ) |> 
  display()
```

Estimated means for each group in each congruence condition and contrasts between groups and conditions in the implicit task.
:::

::: {#supptbl-estimates-explicit}
```{r}
#| label: emmeans-explicit
#| echo: false

emmeans_ex <-
  emmeans(fit_explicit, c("aphantasia", "congruence")) |>
  summary(point.est = median) |>
  as_tibble() |>
  mutate(across(3:7, ~.*1000)) |>
  rename(median = emmean)

emmeans_ex |> 
  rename(Group = 1, Condition = 2, "Median (ms)" = median) |>
  display()

fit_explicit |> 
  estimate_contrasts(
    contrast = c("aphantasia", "congruence"), 
    p_adjust = "none"
    ) |> 
  display()
```

Estimated means for each group in each congruence condition and contrasts between groups and conditions in the explicit task.
:::

## Visualisations

The figures below are also displayed in the main article. [See the HTML version for the code and details.]{.content-hidden when-format="html"}

```{r}
#| label: fig-im
#| fig-cap: Subject means and model-estimated means per group and condition in the implicit task.
#| fig-width: 18
#| fig-height: 7

subj_means_im <-
  df_i_rt |> 
  group_by(subjectid, aphantasia, congruence) |>
  reframe(rt = mean(rt)*1000)

(
  plot_models_full(subj_means_im, "aphantasia", emmeans_im, y_min = 400, y_max = 1110, size = 4) +
  plot_models_zoomed(subj_means_im, "aphantasia", emmeans_im, size = 4) &
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    legend.margin = margin(0, 150, 25, 0),
    axis.title.y = element_text(size = 20),
    axis.text.x = element_text(size = 18)
  )
) +
  plot_layout(
    guides = "collect",
    widths = c(1, 1.2)
  )

# ggsave(here("figures/model-implicit.png"), dpi = 600)
```

```{r}
#| label: fig-ex
#| fig-cap: Subject means and model-estimated means per group and condition in the explicit task.
#| fig-width: 18
#| fig-height: 7

subj_means_ex <-
  df_e_rt |> 
  group_by(subjectid, aphantasia, congruence) |>
  reframe(rt = mean(rt)*1000)

(
  plot_models_full(subj_means_ex, "aphantasia", emmeans_ex, y_min = 350, y_max = 1450, size = 4) +
  plot_models_zoomed(subj_means_ex, "aphantasia", emmeans_ex, size = 4) &
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    legend.margin = margin(0, 150, 25, 0),
    axis.title.y = element_text(size = 20),
    axis.text.x = element_text(size = 18)
  )
) +
  plot_layout(
    guides = "collect",
    widths = c(1, 1.2)
  )

# ggsave(here("figures/model-explicit.png"), dpi = 600)
```

# Finer sub-groups

::: {#supptbl-finer-check}
```{r}
#| label: checking-finer-groups

df_i_acc |> 
  select(subjectid, aphantasia, sub_group) |> 
  distinct() |> 
  group_by(aphantasia, sub_group) |> 
  count() |> 
  arrange(sub_group) |> 
  rename(Aphantasia = 1, "Sub-group" = 2, N = 3) |> 
  display()
```
:::

Interestingly, we have 39 participants that did not score at floor VVIQ but between 17 and 32, a score range that @reeder have proposed to call "hypophantasia". However, our sample comprised only 2 hyperphantasics, i.e. participants scoring above 74 [@zeman2024]. These two participants will therefore be removed from the sample before performing new analyses on the aphantasic, hypophantasic and control groups.

## Questionnaires analyses

### Table

::: {#supptbl-questionnaire-results}
```{r}
#| label: table-finer-questionnaires
#| echo: false

group_effects_finer <- 
  df_questionnaires |>
  filter(sub_group != "Hyperphantasia") |>
  pivot_longer(
    cols = c("VVIQ":"SUIS"),
    names_to = "questionnaire",
    values_to = "score"
  ) |> 
  group_by(questionnaire) |> 
  nest() |> 
  rowwise() |> 
  mutate(
    lm = list(lm(score ~ sub_group + age, data = data)),
    lm_ranked = list(lm(rank(score) ~ sub_group + age, data = data)),
    means = list(generate_model_means(lm, questionnaire, group = "sub_group")),
    contrasts = list(
      estimate_contrasts(lm, contrast = "sub_group", p_adjust = "none") |> 
        mutate(Questionnaire = questionnaire)
        ),
    # table = list(generate_model_summary(lm, lm_ranked, questionnaire, group = "sub_group"))
  )

bind_rows(group_effects_finer$means) |> display()
bind_rows(group_effects_finer$contrasts) |> display()
```
:::

### Plot

```{r}
#| label: questionnaire-plot-setup-finer
#| echo: false

# dodge width for all the geoms
dw <- 1
# axis text size
txt <- 14
# legend text size
txt_legend <- 12

norm_means_finer <- 
  df_q_norm |> 
  filter(sub_group != "Hyperphantasia") |>
  group_by(sub_group) |>
  pivot_longer(
    cols = c(VVIQ:SUIS),
    names_to = "Questionnaire",
    values_to = "score"
  ) |> 
  group_by(Questionnaire) |> 
  nest() |> 
  rowwise() |> 
  mutate(
    lm = list(lm(score ~ sub_group, data = data)),
    means = list(estimate_means(lm, by = "sub_group"))
  ) |> 
  unnest(means) |> 
  select(!c(data, lm)) |> 
  ungroup() |> 
  mutate(
    Questionnaire = fct_relevel(
      Questionnaire,
      c("VVIQ", "SUIS", "OSIQ_Object", "OSIQ_Spatial")
    ))

norm_means_finer
```

::: {#suppfig-questionnaire-plot}

```{r}
#| label: plot-questionnaires-finer
#| fig-width: 10
#| fig-height: 5

df_q_norm |> 
  filter(sub_group != "Hyperphantasia") |>
  
  # --------------------- Long format first
  pivot_longer(
    cols = c(VVIQ:SUIS),
    names_to = "Questionnaire",
    values_to = "Score"
  ) |>
  mutate(
    Questionnaire = fct_relevel(
      Questionnaire, 
      c("VVIQ", "SUIS", "OSIQ_Object", "OSIQ_Spatial")
    )) |> 
  
  # --------------------- Plotting 
  ggplot(aes(
    x = Questionnaire, 
    y = Score, 
    fill = sub_group, 
    color = sub_group
    )) +
  
  # accentuation of the median line at 0.5
  geom_hline(
    yintercept = .5,
    linetype = 1,
    color = "grey30",
    alpha = .2
  ) +
  
  # ---------------- Scores
  # violin shapes for the distributions and quantiles
  geom_violin(
    position = position_dodge(dw),
    alpha = .1,
    draw_quantiles = c(.25, .5, .75)
  ) +
  # points for means and lines for CIs
  geom_pointrange(
    data = norm_means_finer,
    aes(
      x = Questionnaire,
      y = Mean,
      ymin = CI_low,
      ymax = CI_high,
      color = sub_group
    ),
    size = .75,
    linewidth = 1,
    position = position_dodge(dw)
  ) +
  
  # ---------------- Lines
  geom_vline(
    aes(xintercept = stage(Questionnaire, after_scale = 1.5)),
    linetype = 3
  ) +
  geom_vline(
    aes(xintercept = stage(Questionnaire, after_scale = 2.5)),
    linetype = 3
  ) +
  # dotted line
  geom_vline(
    aes(xintercept = stage(Questionnaire, after_scale = 3.5)),
    linetype = 3
  ) +
  
  # --------------- Significance
  # VVIQ control vs others
  plot_significance_labels(label = "***", size = 7,
    x_star = 0.83, y_star = .93,
    x_line = 0.66, x_line_end = 1,
    y_line = .92
  ) +
  geom_segment(
    x = 0.66, xend = 1.34, 
    y = .91, yend = .91, linewidth = .5, color = "black") +
  # VVIQ hypo vs aph
  plot_significance_labels(label = "***", size = 7,
    x_star = 1.17, y_star = .39,
    x_line = 1, x_line_end = 1.34,
    y_line = .38
  ) +
  
  # SUIS control vs others
  plot_significance_labels(label = "***", size = 7,
    x_star = 1.83, y_star = .93,
    x_line = 1.66, x_line_end = 2,
    y_line = .92
  ) +
  geom_segment(
    x = 1.66, xend = 2.34, 
    y = .91, yend = .91, linewidth = .5, color = "black") +
  # SUIS hypo vs aph
  plot_significance_labels(label = "*", size = 7,
    x_star = 2.17, y_star = .39,
    x_line = 2, x_line_end = 2.34,
    y_line = .38
  ) +
  
  # OSIQ-O control vs others
  plot_significance_labels(label = "***", size = 7,
    x_star = 2.83, y_star = .93,
    x_line = 2.66, x_line_end = 3,
    y_line = .92
  ) +
  geom_segment(
    x = 2.66, xend = 3.34, 
    y = .91, yend = .91, linewidth = .5, color = "black") +
  
  # OSIQ-S control vs aph only
  plot_significance_labels(label = "***", size = 7,
    x_star = 4, y_star = .84,
    x_line = 3.66, x_line_end = 4.34,
    y_line = .83
  ) +
  # OSIQ-S hypo vs aph
  plot_significance_labels(label = "*", size = 7,
    x_star = 4.17, y_star = .78,
    x_line = 4, x_line_end = 4.34,
    y_line = .77
  ) +
  
  # ----------------------------- Aesthetics 
  scale_color_okabeito(name = "Group:  ", labels = c(" Control   ", " Hypophantasia   ", " Aphantasia")) +
  scale_fill_okabeito(name = "Group:  ", labels  = c(" Control   ", " Hypophantasia   ", " Aphantasia")) +
  scale_x_discrete(
    name = "",
    labels = c("VVIQ", "SUIS", "OSIQ-Object", "OSIQ-Spatial"),
    expand = expansion(mult = c(0, 0))
  ) +
  scale_y_continuous(
    name = "Standardized score",
    breaks = breaks_pretty(8),
    expand = expansion(mult = c(0.05, 0.1))
  ) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.major.y = element_line(),
    axis.text.x  = element_text(size = txt),
    axis.title.y = element_text(size = txt),
    legend.title = element_text(size = txt_legend),
    legend.text  = element_text(size = txt_legend),
    legend.position = "top"
    )

ggsave(here("figures/questionnaires-finer.png"), dpi = 600)
```
:::

## Response Times analysis

## Model fitting

```{r}
#| label: finer-models

model_formula_finer <- rt ~ (sub_group + congruence + color)^3 + (1|subjectid)

fit_finer_i <- 
  glmer(
    formula = model_formula_finer,
    data = df_i_finer,
    family = inverse.gaussian(link = "identity"),
    control = glmerControl(optimizer = "bobyqa")
  )

fit_finer_e <-
  glmer(
    formula = model_formula_finer,
    data = df_e_finer,
    family = inverse.gaussian(link = "identity"),
    control = glmerControl(optimizer = "bobyqa")
  )
```

## Model diagnostics

```{r}
#| label: checks-finer-models
#| fig-width: 14
#| fig-height: 12
#| eval: false

# characteristics to check
model_checks <- c("pp_check","homogeneity", "vif", "outliers", "qq", "reqq")

check_model(
  fit_finer_i, 
  checks = model_checks, 
  detrend = FALSE, 
  residual_type = "normal"
  ) |> 
  plot()

# ggsave(here("figures/checks-finer-implicit.png"), dpi = 600)

check_model(
  fit_finer_e, 
  checks = model_checks, 
  detrend = FALSE, 
  residual_type = "normal"
  ) |> 
  plot()

# ggsave(here("figures/checks-finer-explicit.png"), dpi = 600)
```

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the implicit task with finer sub-groups.](../figures/checks-finer-implicit.png){#suppfig-implicit-checks-finer}

![Model assumption checks for the Generalized Linear Mixed Model fit on the RTs in the explicit task with finer sub-groups.](../figures/checks-finer-explicit.png){#suppfig-explicit-checks-finer}

## Model summaries

::: {#supptbl-im-summary-finer}
```{r}
#| label: summary-finer-im

model_performance(fit_finer_i) |> display()

# model_parameters(fit_finer_i) |> display()

Anova(fit_finer_i)
```
:::

::: {#supptbl-ex-summary-finer}
```{r}
#| label: summary-finer-ex

model_performance(fit_finer_e) |> display()

# model_parameters(fit_finer_e) |> display()

Anova(fit_finer_e)
```
:::

## Estimated means and contrasts

::: {#supptbl-im-estimates-finer}
```{r}
#| label: emmeans-finer-im
#| echo: false

emmeans_finer_im <-
  emmeans(fit_finer_i, c("congruence", "sub_group")) |>
  summary(point.est = median) |>
  as_tibble() |>
  mutate(across(3:7, ~.*1000)) |>
  rename(median = emmean)

emmeans_finer_im |>
  rename(Condition = 1, "Sub-group" = 2, "Median (ms)" = median) |>
  display()

fit_finer_i |>
  estimate_contrasts(
    contrast = c("congruence", "sub_group"),
    p_adjust = "none"
  ) |> 
  display()
```
:::

::: {#supptbl-ex-estimates-finer}
```{r}
#| label: emmeans-finer-ex
#| echo: false

emmeans_finer_ex <-
  emmeans(fit_finer_e, c("congruence", "sub_group")) |>
  summary(point.est = median) |>
  as_tibble() |>
  mutate(across(3:7, ~.*1000)) |>
  rename(median = emmean)

emmeans_finer_ex |>
  rename(Condition = 1, "Sub-group" = 2, "Median (ms)" = median) |>
  display()

fit_finer_e |>
  estimate_contrasts(
    contrast = c("congruence", "sub_group"),
    p_adjust = "none"
  ) |> 
  display()
```
:::

```{r}
#| label: fig-finer-im
#| fig-width: 18
#| fig-height: 7

subj_means_finer_im <-
  df_i_finer |> 
  group_by(subjectid, sub_group, congruence) |>
  reframe(rt = mean(rt)*1000)

(
  plot_models_full(subj_means_finer_im, "sub_group", emmeans_finer_im, size = 4, dw = .6) +
  plot_models_zoomed(subj_means_finer_im, "sub_group", emmeans_finer_im, size = 4) &
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    legend.margin = margin(0, 150, 25, 0),
    axis.title.y = element_text(size = 20),
    axis.text.x = element_text(size = 18)
  )
) +
  plot_layout(
    guides = "collect",
    widths = c(1, 1.2)
  )

# ggsave(here("figures/model-implicit-sub-groups.png"), dpi = 600)
```


```{r}
#| label: fig-finer-ex
#| fig-width: 18
#| fig-height: 7

subj_means_finer_ex <-
  df_e_finer |> 
  group_by(subjectid, sub_group, congruence) |>
  reframe(rt = mean(rt)*1000)

(
  plot_models_full(subj_means_finer_ex, "sub_group", emmeans_finer_ex, y_min = 350, y_max = 1450, size = 4, dw = .6) +
  plot_models_zoomed(subj_means_finer_ex, "sub_group", emmeans_finer_ex, size = 4) &
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 20),
    legend.margin = margin(0, 150, 25, 0),
    axis.title.y = element_text(size = 20),
    axis.text.x = element_text(size = 18)
  )
) +
  plot_layout(
    guides = "collect",
    widths = c(1, 1.2)
  )

# ggsave(here("figures/model-explicit-sub-groups.png"), dpi = 600)
```







::: {.content-visible when-format="html"}
     

::: {.callout-note collapse="true"}
# Session information for reproducibility

```{r}
#| label: session-information
#| echo: false

cat("═════════════════════════════════════════════════════════════════════════")
report_system(session = sessionInfo())
cat("Packages used:")
report_packages(session = sessionInfo())
cat("═════════════════════════════════════════════════════════════════════════")
```
:::
:::
